// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
  return HandlerWithOptions(si, FiberServerOptions{})
}

type FiberServerOptions struct {
    BaseURL string
    BaseRouter *fiber.App
    Middlewares []MiddlewareFunc
    ErrorHandlerFunc   func(c *fiber.Ctx, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r fiber.App) http.Handler {
    return HandlerWithOptions(si, FiberServerOptions {
        BaseRouter: r,
    })
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r fiber.App, baseURL string) http.Handler {
    return HandlerWithOptions(si, FiberServerOptions {
        BaseURL: baseURL,
        BaseRouter: r,
    })
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options FiberServerOptions) http.Handler {
r := options.BaseRouter

if r == nil {
r = fiber.New()
}
if options.ErrorHandlerFunc == nil {
    options.ErrorHandlerFunc = func(c *fiber.Ctx, err error) {
        http.Error(w, err.Error(), http.StatusBadRequest)
    }
}
{{if .}}wrapper := ServerInterfaceWrapper{
Handler: si,
HandlerMiddlewares: options.Middlewares,
ErrorHandlerFunc: options.ErrorHandlerFunc,
}
{{end}}
{{range .}}r.Group(func(r fiber.App) {
r.{{.Method | lower | title }}(options.BaseURL+"{{.Path | swaggerUriToFiberUri}}", wrapper.{{.OperationId}})
})
{{end}}
return r
}
