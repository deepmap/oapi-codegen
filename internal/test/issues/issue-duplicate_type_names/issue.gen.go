// Package duplicate_type_names provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package duplicate_type_names

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Bar defines model for Bar.
type Bar struct {
	Value *string `json:"value,omitempty"`
}

// Bar2 defines model for Bar2.
type Bar2 struct {
	Value *float32 `json:"value,omitempty"`
}

// BarParam defines model for BarParam.
type BarParam []int

// BarParam2 defines model for BarParam2.
type BarParam2 []int

// BarParam22 defines model for Bar.
type BarParam22 string

// BarResp defines model for Bar.
type BarResp struct {
	Value1 *Bar       `json:"value1,omitempty"`
	Value2 *Bar2      `json:"value2,omitempty"`
	Value3 *BarParam  `json:"value3,omitempty"`
	Value4 *BarParam2 `json:"value4,omitempty"`
}

// BarReqBody defines model for Bar.
type BarReqBody struct {
	Value *int `json:"value,omitempty"`
}

// PostFooParams defines parameters for PostFoo.
type PostFooParams struct {
	Bar *Bar `json:"Bar,omitempty"`
}

// PostFooRequestBody defines body for PostFoo for application/json ContentType.
type PostFooJSONRequestBody Bar

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostFoo request  with any body
	PostFooWithBody(ctx context.Context, params *PostFooParams, contentType string, body io.Reader) (*http.Response, error)

	PostFoo(ctx context.Context, params *PostFooParams, body PostFooJSONRequestBody) (*http.Response, error)
}

func (c *Client) PostFooWithBody(ctx context.Context, params *PostFooParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostFooRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoo(ctx context.Context, params *PostFooParams, body PostFooJSONRequestBody) (*http.Response, error) {
	req, err := NewPostFooRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewPostFooRequest calls the generic PostFoo builder with application/json body
func NewPostFooRequest(server string, params *PostFooParams, body PostFooJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFooRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFooRequestWithBody generates requests for PostFoo with any type of body
func NewPostFooRequestWithBody(server string, params *PostFooParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/foo")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Bar != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "Bar", *params.Bar); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostFoo request  with any body
	PostFooWithBodyWithResponse(ctx context.Context, params *PostFooParams, contentType string, body io.Reader) (*PostFooResponse, error)

	PostFooWithResponse(ctx context.Context, params *PostFooParams, body PostFooJSONRequestBody) (*PostFooResponse, error)
}

type PostFooResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Value1 *Bar       `json:"value1,omitempty"`
		Value2 *Bar2      `json:"value2,omitempty"`
		Value3 *BarParam  `json:"value3,omitempty"`
		Value4 *BarParam2 `json:"value4,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostFooResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFooResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostFooWithBodyWithResponse request with arbitrary body returning *PostFooResponse
func (c *ClientWithResponses) PostFooWithBodyWithResponse(ctx context.Context, params *PostFooParams, contentType string, body io.Reader) (*PostFooResponse, error) {
	rsp, err := c.PostFooWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFooResponse(rsp)
}

func (c *ClientWithResponses) PostFooWithResponse(ctx context.Context, params *PostFooParams, body PostFooJSONRequestBody) (*PostFooResponse, error) {
	rsp, err := c.PostFoo(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFooResponse(rsp)
}

// ParsePostFooResponse parses an HTTP response from a PostFooWithResponse call
func ParsePostFooResponse(rsp *http.Response) (*PostFooResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFooResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Value1 *Bar       `json:"value1,omitempty"`
			Value2 *Bar2      `json:"value2,omitempty"`
			Value3 *BarParam  `json:"value3,omitempty"`
			Value4 *BarParam2 `json:"value4,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /foo)
	PostFoo(ctx echo.Context, params PostFooParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFoo converts echo context to params.
func (w *ServerInterfaceWrapper) PostFoo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFooParams
	// ------------- Optional query parameter "Bar" -------------

	err = runtime.BindQueryParameter("form", true, false, "Bar", ctx.QueryParams(), &params.Bar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Bar: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFoo(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/foo", wrapper.PostFoo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTP++bMBD9LteOFAjpxJihUreMlaoODlwSR+Bz7CMSivju1dmUgELaVPpNscL7Y797",
	"d4eKWksGDXso73BGVaMLx51y8uOrM7ZKTtxbhBIORA0qA8MwJGCVUy3ykqINlHDt0PWQgFGtsORT8izm",
	"2WlziloOrx163lGtcS5XkWE0LEdlbaMrxZpMdvFklhe0jiw6Htk31XQ4s9KG8YQOxGr8iw4XrFjco7+3",
	"ZPyHeW/k9NnhEUr4lD1yziLLZ+IxJBFcvAEuJvT2DfReRjMxvr7LKNYDSqBGXzlt5f1QQpqmkMzr8uPL",
	"GNmayYiLLw5qo+0s6r9PbyrK090SCNH8U8F07WF9/EEhxiXtZWz9Wm8mnnJO9XNa8V88uYE2RwpYzQ1O",
	"cd7Q+RhvnuZpLlSyaJTVUMI2zdMNyMrxOfhkRwoalnwoqDw+1PN7DSXsyfM3Ilju6M/1+TwgcUS/5tvY",
	"v5rqYmH/tHmxRUWevyaPuKkUw/A7AAD//5eSaFWOBAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
