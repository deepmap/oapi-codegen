// Package spec_base provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package spec_base

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "github.com/deepmap/oapi-codegen/internal/test/issues/issue-removed-external-ref/gen/spec_ext"
	"github.com/go-chi/chi/v5"
)

// DirectBar defines model for DirectBar.
type DirectBar = externalRef0.Foo

// PackedBar defines model for PackedBar.
type PackedBar struct {
	Core    *externalRef0.Foo `json:"core,omitempty"`
	Directd *DirectBar        `json:"directd,omitempty"`
	Id      *string           `json:"id,omitempty"`
}

// ExternalRef0Pascal defines model for 201.
type ExternalRef0Pascal = PascalSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /ignoreExtRefTrouble)
	PostIgnoreExtRefTrouble(w http.ResponseWriter, r *http.Request)

	// (POST /invalidExtRefTrouble)
	PostInvalidExtRefTrouble(w http.ResponseWriter, r *http.Request)

	// (POST /noTrouble)
	PostNoTrouble(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostIgnoreExtRefTrouble operation middleware
func (siw *ServerInterfaceWrapper) PostIgnoreExtRefTrouble(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIgnoreExtRefTrouble(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostInvalidExtRefTrouble operation middleware
func (siw *ServerInterfaceWrapper) PostInvalidExtRefTrouble(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInvalidExtRefTrouble(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNoTrouble operation middleware
func (siw *ServerInterfaceWrapper) PostNoTrouble(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNoTrouble(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/ignoreExtRefTrouble", wrapper.PostIgnoreExtRefTrouble)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/invalidExtRefTrouble", wrapper.PostInvalidExtRefTrouble)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/noTrouble", wrapper.PostNoTrouble)
	})

	return r
}

type N201JSONResponse PascalSchema

func (t N201JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((PascalSchema)(t))
}

type PostIgnoreExtRefTroubleRequestObject struct {
}

type PostIgnoreExtRefTrouble201JSONResponse = N201JSONResponse

type PostInvalidExtRefTroubleRequestObject struct {
}

type PostInvalidExtRefTrouble300JSONResponse = ExternalRef0.PascalJSONResponse

type PostNoTroubleRequestObject struct {
}

type PostNoTrouble200JSONResponse struct {
	DirectBar   *DirectBar        `json:"directBar,omitempty"`
	DirectFoo   *externalRef0.Foo `json:"directFoo,omitempty"`
	IndirectFoo *PackedBar        `json:"indirectFoo,omitempty"`
	Name        *string           `json:"name,omitempty"`
}

func (t PostNoTrouble200JSONResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal((struct {
		DirectBar   *DirectBar        `json:"directBar,omitempty"`
		DirectFoo   *externalRef0.Foo `json:"directFoo,omitempty"`
		IndirectFoo *PackedBar        `json:"indirectFoo,omitempty"`
		Name        *string           `json:"name,omitempty"`
	})(t))
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /ignoreExtRefTrouble)
	PostIgnoreExtRefTrouble(ctx context.Context, request PostIgnoreExtRefTroubleRequestObject) interface{}

	// (POST /invalidExtRefTrouble)
	PostInvalidExtRefTrouble(ctx context.Context, request PostInvalidExtRefTroubleRequestObject) interface{}

	// (POST /noTrouble)
	PostNoTrouble(ctx context.Context, request PostNoTroubleRequestObject) interface{}
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) interface{}

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostIgnoreExtRefTrouble operation middleware
func (sh *strictHandler) PostIgnoreExtRefTrouble(w http.ResponseWriter, r *http.Request) {
	var request PostIgnoreExtRefTroubleRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) interface{} {
		return sh.ssi.PostIgnoreExtRefTrouble(ctx, request.(PostIgnoreExtRefTroubleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostIgnoreExtRefTrouble")
	}

	response := handler(r.Context(), w, r, request)

	switch v := response.(type) {
	case PostIgnoreExtRefTrouble201JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(201)
		writeJSON(w, v)
	case error:
		sh.options.ResponseErrorHandlerFunc(w, r, v)
	case nil:
	default:
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", v))
	}
}

// PostInvalidExtRefTrouble operation middleware
func (sh *strictHandler) PostInvalidExtRefTrouble(w http.ResponseWriter, r *http.Request) {
	var request PostInvalidExtRefTroubleRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) interface{} {
		return sh.ssi.PostInvalidExtRefTrouble(ctx, request.(PostInvalidExtRefTroubleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostInvalidExtRefTrouble")
	}

	response := handler(r.Context(), w, r, request)

	switch v := response.(type) {
	case PostInvalidExtRefTrouble300JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(300)
		writeJSON(w, v)
	case error:
		sh.options.ResponseErrorHandlerFunc(w, r, v)
	case nil:
	default:
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", v))
	}
}

// PostNoTrouble operation middleware
func (sh *strictHandler) PostNoTrouble(w http.ResponseWriter, r *http.Request) {
	var request PostNoTroubleRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) interface{} {
		return sh.ssi.PostNoTrouble(ctx, request.(PostNoTroubleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNoTrouble")
	}

	response := handler(r.Context(), w, r, request)

	switch v := response.(type) {
	case PostNoTrouble200JSONResponse:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		writeJSON(w, v)
	case error:
		sh.options.ResponseErrorHandlerFunc(w, r, v)
	case nil:
	default:
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", v))
	}
}

func writeJSON(w http.ResponseWriter, v interface{}) {
	if err := json.NewEncoder(w).Encode(v); err != nil {
		fmt.Fprintln(w, err)
	}
}

func writeRaw(w http.ResponseWriter, b []byte) {
	if _, err := w.Write(b); err != nil {
		fmt.Fprintln(w, err)
	}
}
