// Package components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package components

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for Enum1.
const (
	Enum1One Enum1 = "One"

	Enum1Three Enum1 = "Three"

	Enum1Two Enum1 = "Two"
)

// Defines values for Enum2.
const (
	Enum2One Enum2 = "One"

	Enum2Three Enum2 = "Three"

	Enum2Two Enum2 = "Two"
)

// Defines values for Enum3.
const (
	Enum3Bar Enum3 = "Bar"

	Enum3Enum1One Enum3 = "Enum1One"

	Enum3Foo Enum3 = "Foo"
)

// Defines values for Enum4.
const (
	Cat Enum4 = "Cat"

	Dog Enum4 = "Dog"

	Mouse Enum4 = "Mouse"
)

// Defines values for Enum5.
const (
	N5 Enum5 = 5

	N6 Enum5 = 6

	N7 Enum5 = 7
)

// Defines values for EnumParam1.
const (
	EnumParam1Both EnumParam1 = "both"

	EnumParam1False EnumParam1 = "false"

	EnumParam1True EnumParam1 = "true"
)

// Defines values for EnumParam2.
const (
	EnumParam2Both EnumParam2 = "both"

	EnumParam2False EnumParam2 = "false"

	EnumParam2True EnumParam2 = "true"
)

// Defines values for EnumParam3.
const (
	Alice EnumParam3 = "alice"

	Bob EnumParam3 = "bob"

	Eve EnumParam3 = "eve"
)

// Has additional properties of type int
type AdditionalPropertiesObject1 struct {
	Id                   int            `json:"id"`
	Name                 string         `json:"name"`
	Optional             *string        `json:"optional,omitempty"`
	AdditionalProperties map[string]int `json:"-"`
}

// Does not allow additional properties
type AdditionalPropertiesObject2 struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// Allows any additional property
type AdditionalPropertiesObject3 struct {
	Name                 string                 `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Has anonymous field which has additional properties
type AdditionalPropertiesObject4 struct {
	Inner                AdditionalPropertiesObject4_Inner `json:"inner"`
	Name                 string                            `json:"name"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// AdditionalPropertiesObject4_Inner defines model for AdditionalPropertiesObject4.Inner.
type AdditionalPropertiesObject4_Inner struct {
	Name                 string                 `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Has additional properties with schema for dictionaries
type AdditionalPropertiesObject5 struct {
	AdditionalProperties map[string]SchemaObject `json:"-"`
}

// Array of object with additional properties
type AdditionalPropertiesObject6 []AdditionalPropertiesObject6_Item

// AdditionalPropertiesObject6_Item defines model for AdditionalPropertiesObject6.Item.
type AdditionalPropertiesObject6_Item struct {
	AdditionalProperties map[string]SchemaObject `json:"-"`
}

// simple anyOf case
type AnyOfObject1 struct {
	union json.RawMessage
}

// Conflicts with Enum2, enum values need to be prefixed with type
// name.
type Enum1 string

// Conflicts with Enum1, enum values need to be prefixed with type
// name.
type Enum2 string

// Enum values conflict with Enums above, need to be prefixed
// with type name.
type Enum3 string

// No conflicts here, should have unmodified enums
type Enum4 string

// Numerical enum
type Enum5 int

// ObjectWithJsonField defines model for ObjectWithJsonField.
type ObjectWithJsonField struct {
	Name   string          `json:"name"`
	Value1 json.RawMessage `json:"value1"`
	Value2 json.RawMessage `json:"value2,omitempty"`
}

// oneOf with references and no disciminator
type OneOfObject1 struct {
	union json.RawMessage
}

// fixed properties, variable required - will compile, but not much sense
type OneOfObject10 struct {
	One   *string `json:"one,omitempty"`
	Three *bool   `json:"three,omitempty"`
	Two   *int    `json:"two,omitempty"`
	union json.RawMessage
}

// OneOfObject100 defines model for .
type OneOfObject100 interface{}

// OneOfObject101 defines model for .
type OneOfObject101 interface{}

// additional properties of oneOf
type OneOfObject11 struct {
	AdditionalProperties map[string]OneOfObject11_AdditionalProperties `json:"-"`
}

// OneOfObject110 defines model for .
type OneOfObject110 bool

// OneOfObject111 defines model for .
type OneOfObject111 float32

// OneOfObject112 defines model for .
type OneOfObject112 string

// OneOfObject11_AdditionalProperties defines model for OneOfObject11.AdditionalProperties.
type OneOfObject11_AdditionalProperties struct {
	union json.RawMessage
}

// OneOfObject12 defines model for OneOfObject12.
type OneOfObject12 struct {
	union json.RawMessage
}

// OneOfObject120 defines model for .
type OneOfObject120 string

// OneOfObject121 defines model for .
type OneOfObject121 float32

// oneOf with inline elements
type OneOfObject2 struct {
	union json.RawMessage
}

// OneOfObject20 defines model for .
type OneOfObject20 struct {
	Name *string `json:"name,omitempty"`
}

// OneOfObject21 defines model for .
type OneOfObject21 []float32

// OneOfObject22 defines model for .
type OneOfObject22 bool

// inline OneOf
type OneOfObject3 struct {
	Union *OneOfObject3_Union `json:"union,omitempty"`
}

// OneOfObject3_Union defines model for OneOfObject3.Union.
type OneOfObject3_Union struct {
	union json.RawMessage
}

// oneOf plus fixed type - custom marshaling/unmarshaling
type OneOfObject4 struct {
	FixedProperty *string `json:"fixedProperty,omitempty"`
	union         json.RawMessage
}

// oneOf with disciminator but no mapping
type OneOfObject5 struct {
	union json.RawMessage
}

// oneOf with discriminator and mapping
type OneOfObject6 struct {
	union json.RawMessage
}

// array of oneOf
type OneOfObject7 []OneOfObject7_Item

// OneOfObject7_Item defines model for OneOfObject7.Item.
type OneOfObject7_Item struct {
	union json.RawMessage
}

// oneOf with fixed properties
type OneOfObject8 struct {
	Fixed *string `json:"fixed,omitempty"`
	union json.RawMessage
}

// oneOf with fixed descriminator
type OneOfObject9 struct {
	Type  string `json:"type"`
	union json.RawMessage
}

// OneOfVariant1 defines model for OneOfVariant1.
type OneOfVariant1 struct {
	Name string `json:"name"`
}

// OneOfVariant2 defines model for OneOfVariant2.
type OneOfVariant2 []int

// OneOfVariant3 defines model for OneOfVariant3.
type OneOfVariant3 bool

// OneOfVariant4 defines model for OneOfVariant4.
type OneOfVariant4 struct {
	Discriminator string `json:"discriminator"`
	Name          string `json:"name"`
}

// OneOfVariant5 defines model for OneOfVariant5.
type OneOfVariant5 struct {
	Discriminator string `json:"discriminator"`
	Id            int    `json:"id"`
}

// OneOfVariant6 defines model for OneOfVariant6.
type OneOfVariant6 struct {
	Values OneOfVariant2 `json:"values"`
}

// SchemaObject defines model for SchemaObject.
type SchemaObject struct {
	FirstName string `json:"firstName"`

	// This property is required and readOnly, so the go model should have it as a pointer,
	// as it will not be included when it is sent from client to server.
	ReadOnlyRequiredProp  *string `json:"readOnlyRequiredProp,omitempty"`
	Role                  string  `json:"role"`
	WriteOnlyRequiredProp *int    `json:"writeOnlyRequiredProp,omitempty"`
}

// EnumParam1 defines model for EnumParam1.
type EnumParam1 string

// EnumParam2 defines model for EnumParam2.
type EnumParam2 string

// EnumParam3 defines model for EnumParam3.
type EnumParam3 string

// a parameter
type ParameterObject string

// ResponseObject defines model for ResponseObject.
type ResponseObject struct {
	Field SchemaObject `json:"Field"`
}

// RequestBody defines model for RequestBody.
type RequestBody struct {
	Field SchemaObject `json:"Field"`
}

// ParamsWithAddPropsParams_P1 defines parameters for ParamsWithAddProps.
type ParamsWithAddPropsParams_P1 struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ParamsWithAddPropsParams defines parameters for ParamsWithAddProps.
type ParamsWithAddPropsParams struct {
	// This parameter has additional properties
	P1 ParamsWithAddPropsParams_P1 `json:"p1"`

	// This parameter has an anonymous inner property which needs to be
	// turned into a proper type for additionalProperties to work
	P2 struct {
		Inner ParamsWithAddPropsParams_P2_Inner `json:"inner"`
	} `json:"p2"`
}

// ParamsWithAddPropsParams_P2_Inner defines parameters for ParamsWithAddProps.
type ParamsWithAddPropsParams_P2_Inner struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BodyWithAddPropsJSONBody defines parameters for BodyWithAddProps.
type BodyWithAddPropsJSONBody struct {
	Inner                BodyWithAddPropsJSONBody_Inner `json:"inner"`
	Name                 string                         `json:"name"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// BodyWithAddPropsJSONBody_Inner defines parameters for BodyWithAddProps.
type BodyWithAddPropsJSONBody_Inner struct {
	AdditionalProperties map[string]int `json:"-"`
}

// EnsureEverythingIsReferencedJSONRequestBody defines body for EnsureEverythingIsReferenced for application/json ContentType.
type EnsureEverythingIsReferencedJSONRequestBody RequestBody

// BodyWithAddPropsJSONRequestBody defines body for BodyWithAddProps for application/json ContentType.
type BodyWithAddPropsJSONRequestBody BodyWithAddPropsJSONBody

// Getter for additional properties for ParamsWithAddPropsParams_P1. Returns the specified
// element and whether it was found
func (a ParamsWithAddPropsParams_P1) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParamsWithAddPropsParams_P1
func (a *ParamsWithAddPropsParams_P1) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParamsWithAddPropsParams_P1 to handle AdditionalProperties
func (a *ParamsWithAddPropsParams_P1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParamsWithAddPropsParams_P1 to handle AdditionalProperties
func (a ParamsWithAddPropsParams_P1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ParamsWithAddPropsParams_P2_Inner. Returns the specified
// element and whether it was found
func (a ParamsWithAddPropsParams_P2_Inner) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParamsWithAddPropsParams_P2_Inner
func (a *ParamsWithAddPropsParams_P2_Inner) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParamsWithAddPropsParams_P2_Inner to handle AdditionalProperties
func (a *ParamsWithAddPropsParams_P2_Inner) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParamsWithAddPropsParams_P2_Inner to handle AdditionalProperties
func (a ParamsWithAddPropsParams_P2_Inner) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BodyWithAddPropsJSONBody. Returns the specified
// element and whether it was found
func (a BodyWithAddPropsJSONBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BodyWithAddPropsJSONBody
func (a *BodyWithAddPropsJSONBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BodyWithAddPropsJSONBody to handle AdditionalProperties
func (a *BodyWithAddPropsJSONBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["inner"]; found {
		err = json.Unmarshal(raw, &a.Inner)
		if err != nil {
			return fmt.Errorf("error reading 'inner': %w", err)
		}
		delete(object, "inner")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BodyWithAddPropsJSONBody to handle AdditionalProperties
func (a BodyWithAddPropsJSONBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["inner"], err = json.Marshal(a.Inner)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'inner': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BodyWithAddPropsJSONBody_Inner. Returns the specified
// element and whether it was found
func (a BodyWithAddPropsJSONBody_Inner) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BodyWithAddPropsJSONBody_Inner
func (a *BodyWithAddPropsJSONBody_Inner) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BodyWithAddPropsJSONBody_Inner to handle AdditionalProperties
func (a *BodyWithAddPropsJSONBody_Inner) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BodyWithAddPropsJSONBody_Inner to handle AdditionalProperties
func (a BodyWithAddPropsJSONBody_Inner) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject1. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject1) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject1
func (a *AdditionalPropertiesObject1) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject1 to handle AdditionalProperties
func (a *AdditionalPropertiesObject1) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["optional"]; found {
		err = json.Unmarshal(raw, &a.Optional)
		if err != nil {
			return fmt.Errorf("error reading 'optional': %w", err)
		}
		delete(object, "optional")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject1 to handle AdditionalProperties
func (a AdditionalPropertiesObject1) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Optional != nil {
		object["optional"], err = json.Marshal(a.Optional)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'optional': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject3. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject3) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject3
func (a *AdditionalPropertiesObject3) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject3 to handle AdditionalProperties
func (a *AdditionalPropertiesObject3) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject3 to handle AdditionalProperties
func (a AdditionalPropertiesObject3) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject4. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject4) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject4
func (a *AdditionalPropertiesObject4) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject4 to handle AdditionalProperties
func (a *AdditionalPropertiesObject4) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["inner"]; found {
		err = json.Unmarshal(raw, &a.Inner)
		if err != nil {
			return fmt.Errorf("error reading 'inner': %w", err)
		}
		delete(object, "inner")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject4 to handle AdditionalProperties
func (a AdditionalPropertiesObject4) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["inner"], err = json.Marshal(a.Inner)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'inner': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject4_Inner. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject4_Inner) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject4_Inner
func (a *AdditionalPropertiesObject4_Inner) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject4_Inner to handle AdditionalProperties
func (a *AdditionalPropertiesObject4_Inner) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject4_Inner to handle AdditionalProperties
func (a AdditionalPropertiesObject4_Inner) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject5. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject5) Get(fieldName string) (value SchemaObject, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject5
func (a *AdditionalPropertiesObject5) Set(fieldName string, value SchemaObject) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SchemaObject)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject5 to handle AdditionalProperties
func (a *AdditionalPropertiesObject5) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SchemaObject)
		for fieldName, fieldBuf := range object {
			var fieldVal SchemaObject
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject5 to handle AdditionalProperties
func (a AdditionalPropertiesObject5) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalPropertiesObject6_Item. Returns the specified
// element and whether it was found
func (a AdditionalPropertiesObject6_Item) Get(fieldName string) (value SchemaObject, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalPropertiesObject6_Item
func (a *AdditionalPropertiesObject6_Item) Set(fieldName string, value SchemaObject) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]SchemaObject)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalPropertiesObject6_Item to handle AdditionalProperties
func (a *AdditionalPropertiesObject6_Item) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]SchemaObject)
		for fieldName, fieldBuf := range object {
			var fieldVal SchemaObject
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalPropertiesObject6_Item to handle AdditionalProperties
func (a AdditionalPropertiesObject6_Item) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OneOfObject11. Returns the specified
// element and whether it was found
func (a OneOfObject11) Get(fieldName string) (value OneOfObject11_AdditionalProperties, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OneOfObject11
func (a *OneOfObject11) Set(fieldName string, value OneOfObject11_AdditionalProperties) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]OneOfObject11_AdditionalProperties)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OneOfObject11 to handle AdditionalProperties
func (a *OneOfObject11) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]OneOfObject11_AdditionalProperties)
		for fieldName, fieldBuf := range object {
			var fieldVal OneOfObject11_AdditionalProperties
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OneOfObject11 to handle AdditionalProperties
func (a OneOfObject11) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

func (t AnyOfObject1) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AnyOfObject1) FromOneOfVariant4(v OneOfVariant4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AnyOfObject1) AsOneOfVariant5() (OneOfVariant5, error) {
	var body OneOfVariant5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *AnyOfObject1) FromOneOfVariant5(v OneOfVariant5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t AnyOfObject1) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AnyOfObject1) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject1) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject1) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject1) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject1) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject1) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject1) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject1) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject1) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject10) AsOneOfObject100() (OneOfObject100, error) {
	var body OneOfObject100
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject10) FromOneOfObject100(v OneOfObject100) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject10) AsOneOfObject101() (OneOfObject101, error) {
	var body OneOfObject101
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject10) FromOneOfObject101(v OneOfObject101) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject10) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["one"], err = json.Marshal(t.One)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'one': %w", err)
	}

	object["three"], err = json.Marshal(t.Three)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'three': %w", err)
	}

	object["two"], err = json.Marshal(t.Two)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'two': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject10) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["one"]; found {
		err = json.Unmarshal(raw, &t.One)
		if err != nil {
			return fmt.Errorf("error reading 'one': %w", err)
		}
	}

	if raw, found := object["three"]; found {
		err = json.Unmarshal(raw, &t.Three)
		if err != nil {
			return fmt.Errorf("error reading 'three': %w", err)
		}
	}

	if raw, found := object["two"]; found {
		err = json.Unmarshal(raw, &t.Two)
		if err != nil {
			return fmt.Errorf("error reading 'two': %w", err)
		}
	}

	return err
}

func (t OneOfObject11_AdditionalProperties) AsOneOfObject110() (OneOfObject110, error) {
	var body OneOfObject110
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject11_AdditionalProperties) FromOneOfObject110(v OneOfObject110) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject11_AdditionalProperties) AsOneOfObject111() (OneOfObject111, error) {
	var body OneOfObject111
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject11_AdditionalProperties) FromOneOfObject111(v OneOfObject111) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject11_AdditionalProperties) AsOneOfObject112() (OneOfObject112, error) {
	var body OneOfObject112
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject11_AdditionalProperties) FromOneOfObject112(v OneOfObject112) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject11_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject11_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject12) AsOneOfObject120() (OneOfObject120, error) {
	var body OneOfObject120
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject12) FromOneOfObject120(v OneOfObject120) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject12) AsOneOfObject121() (OneOfObject121, error) {
	var body OneOfObject121
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject12) FromOneOfObject121(v OneOfObject121) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject12) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject12) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject12) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject12) FromOneOfVariant4(v OneOfVariant4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject12) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject12) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject2) AsOneOfObject20() (OneOfObject20, error) {
	var body OneOfObject20
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject2) FromOneOfObject20(v OneOfObject20) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject2) AsOneOfObject21() (OneOfObject21, error) {
	var body OneOfObject21
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject2) FromOneOfObject21(v OneOfObject21) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject2) AsOneOfObject22() (OneOfObject22, error) {
	var body OneOfObject22
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject2) FromOneOfObject22(v OneOfObject22) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject2) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject2) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject3_Union) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject3_Union) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject3_Union) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject3_Union) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject3_Union) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject3_Union) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject3_Union) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject3_Union) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject4) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject4) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject4) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject4) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject4) AsOneOfVariant3() (OneOfVariant3, error) {
	var body OneOfVariant3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject4) FromOneOfVariant3(v OneOfVariant3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject4) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["fixedProperty"], err = json.Marshal(t.FixedProperty)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fixedProperty': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject4) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["fixedProperty"]; found {
		err = json.Unmarshal(raw, &t.FixedProperty)
		if err != nil {
			return fmt.Errorf("error reading 'fixedProperty': %w", err)
		}
	}

	return err
}

func (t OneOfObject5) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject5) FromOneOfVariant4(v OneOfVariant4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject5) AsOneOfVariant5() (OneOfVariant5, error) {
	var body OneOfVariant5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject5) FromOneOfVariant5(v OneOfVariant5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject5) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"discriminator"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OneOfObject5) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject5) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject6) AsOneOfVariant4() (OneOfVariant4, error) {
	var body OneOfVariant4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject6) FromOneOfVariant4(v OneOfVariant4) error {
	v.Discriminator = "v4"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject6) AsOneOfVariant5() (OneOfVariant5, error) {
	var body OneOfVariant5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject6) FromOneOfVariant5(v OneOfVariant5) error {
	v.Discriminator = "v5"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject6) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"discriminator"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OneOfObject6) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "v4":
		return t.AsOneOfVariant4()
	case "v5":
		return t.AsOneOfVariant5()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OneOfObject6) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject6) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject7_Item) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject7_Item) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject7_Item) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject7_Item) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject7_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OneOfObject7_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t OneOfObject8) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject8) FromOneOfVariant1(v OneOfVariant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject8) AsOneOfVariant2() (OneOfVariant2, error) {
	var body OneOfVariant2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject8) FromOneOfVariant2(v OneOfVariant2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject8) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["fixed"], err = json.Marshal(t.Fixed)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fixed': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject8) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["fixed"]; found {
		err = json.Unmarshal(raw, &t.Fixed)
		if err != nil {
			return fmt.Errorf("error reading 'fixed': %w", err)
		}
	}

	return err
}

func (t OneOfObject9) AsOneOfVariant1() (OneOfVariant1, error) {
	var body OneOfVariant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject9) FromOneOfVariant1(v OneOfVariant1) error {
	t.Type = "v1"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject9) AsOneOfVariant6() (OneOfVariant6, error) {
	var body OneOfVariant6
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *OneOfObject9) FromOneOfVariant6(v OneOfVariant6) error {
	t.Type = "v6"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t OneOfObject9) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t OneOfObject9) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "v1":
		return t.AsOneOfVariant1()
	case "v6":
		return t.AsOneOfVariant6()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t OneOfObject9) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return nil, err
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *OneOfObject9) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
