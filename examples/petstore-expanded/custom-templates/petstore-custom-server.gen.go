// Package petstore provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package petstore

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/julienschmidt/httprouter"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	// Name Name of the pet
	Name string `json:"name"`

	// Tag Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	// Id Unique id of the pet
	Id int64 `json:"id"`

	// Name Name of the pet
	Name string `json:"name"`

	// Tag Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// Tags tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = NewPet

// helper structs that are not used but could be useful
type endpoint struct {
	Name   string
	Route  string
	Method string
}

type endpoints struct {
	FindPets    endpoint
	AddPet      endpoint
	DeletePet   endpoint
	FindPetByID endpoint
}

var ( // Endpoints describe the current configured endpoints
	Endpoints = endpoints{

		FindPets: endpoint{
			Name:   "FindPets",
			Route:  "/pets",
			Method: "GET",
		},

		AddPet: endpoint{
			Name:   "AddPet",
			Route:  "/pets",
			Method: "POST",
		},

		DeletePet: endpoint{
			Name:   "DeletePet",
			Route:  "/pets/:id",
			Method: "DELETE",
		},

		FindPetByID: endpoint{
			Name:   "FindPetByID",
			Route:  "/pets/:id",
			Method: "GET",
		},
	}
)

type ServerInterface interface {
	NewRouter(options HttpRouterServerOptions) *httprouter.Router

	FindPets(w http.ResponseWriter, r *http.Request, ps httprouter.Params)

	AddPet(w http.ResponseWriter, r *http.Request, _ httprouter.Params)

	DeletePet(w http.ResponseWriter, r *http.Request, ps httprouter.Params)

	FindPetByID(w http.ResponseWriter, r *http.Request, ps httprouter.Params)
}

// Dependencies is the server dependencies
type Dependencies server

type ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, status int, err error)

type HttpRouterServerOptions struct {
	PathPrefix string
}

// server implements ServerInterface methods, validates parameters and calls handlers
type server struct {
	Handlers         HandlerInterface
	Middlewares      *Middlewares
	ErrorHandlerFunc ErrorHandlerFunc
}

// New creates a new Server
func New(d Dependencies) (ServerInterface, error) {
	err := d.validate()

	if err != nil {
		return nil, err
	}

	return server{
		Handlers:         d.Handlers,
		Middlewares:      d.Middlewares,
		ErrorHandlerFunc: d.ErrorHandlerFunc,
	}, nil
}

func (d Dependencies) validate() error {
	if d.Handlers == nil {
		return fmt.Errorf("missing Handlers interface")
	}

	if d.Middlewares == nil {
		return fmt.Errorf("missing Middlewares interface")
	}

	if d.ErrorHandlerFunc == nil {
		return fmt.Errorf("missing ErrorHandlerFunc")
	}

	return nil
}

// Middlewares is a configuration structure that
// allows to call different middlewares per route
type Middlewares struct {
	FindPets    []func(httprouter.Handle) httprouter.Handle
	AddPet      []func(httprouter.Handle) httprouter.Handle
	DeletePet   []func(httprouter.Handle) httprouter.Handle
	FindPetByID []func(httprouter.Handle) httprouter.Handle
}

// HandlerInterface business logic handlers to be called from the http handlers
type HandlerInterface interface {
	FindPets(r *http.Request, params FindPetsParams) (*[]Pet, error)

	AddPet(r *http.Request, addPetJSONRequestBody *AddPetJSONRequestBody) (*Pet, error)

	DeletePet(r *http.Request, id int64) (*Error, error)

	FindPetByID(r *http.Request, id int64) (*Pet, error)
}

// FindPets http handler
func (siw server) FindPets(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, http.StatusBadRequest, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, http.StatusBadRequest, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
		res, err := siw.Handlers.FindPets(r, params)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			siw.ErrorHandlerFunc(w, r, http.StatusInternalServerError, err)
			return
		}

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(res)
	}

	// check if it has middleware and wraps the handler with it
	for _, middleware := range siw.Middlewares.FindPets {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx), ps)
}

// AddPet http handler
func (siw server) AddPet(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	ctx := r.Context()

	// ------------- BODY CONTENT

	// get body content
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, http.StatusBadRequest, err)
		return
	}

	var addPetJSONRequestBody *AddPetJSONRequestBody
	err = json.Unmarshal(body, addPetJSONRequestBody)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, http.StatusBadRequest, err)
		return
	}

	// ------------- END OF BODY CONTENT

	var handler = func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
		res, err := siw.Handlers.AddPet(r, addPetJSONRequestBody)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			siw.ErrorHandlerFunc(w, r, http.StatusInternalServerError, err)
			return
		}

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(res)
	}

	// check if it has middleware and wraps the handler with it
	for _, middleware := range siw.Middlewares.AddPet {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx), httprouter.Params{})
}

// DeletePet http handler
func (siw server) DeletePet(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ps.ByName("id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, http.StatusBadRequest, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
		res, err := siw.Handlers.DeletePet(r, id)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			siw.ErrorHandlerFunc(w, r, http.StatusInternalServerError, err)
			return
		}

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(res)
	}

	// check if it has middleware and wraps the handler with it
	for _, middleware := range siw.Middlewares.DeletePet {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx), ps)
}

// FindPetByID http handler
func (siw server) FindPetByID(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ps.ByName("id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, http.StatusBadRequest, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
		res, err := siw.Handlers.FindPetByID(r, id)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			siw.ErrorHandlerFunc(w, r, http.StatusInternalServerError, err)
			return
		}

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(res)
	}

	// check if it has middleware and wraps the handler with it
	for _, middleware := range siw.Middlewares.FindPetByID {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx), ps)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// NewRouter creates a new router
func (s server) NewRouter(options HttpRouterServerOptions) *httprouter.Router {
	router := httprouter.New()

	// GET /pets
	router.GET(options.PathPrefix+"/pets", s.FindPets)

	// POST /pets
	router.POST(options.PathPrefix+"/pets", s.AddPet)

	// DELETE /pets/:id
	router.DELETE(options.PathPrefix+"/pets/:id", s.DeletePet)

	// GET /pets/:id
	router.GET(options.PathPrefix+"/pets/:id", s.FindPetByID)

	return router
}
