// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/deepmap/oapi-codegen/examples/petstore-expanded/echo/api/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
