// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------
	if paramValue := ctx.QueryParam("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
