// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
	// (PUT /pets/{id})
	UpdatePetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------
	if paramValue := ctx.QueryParam("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// UpdatePetById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)
	router.PUT("/pets/:id", wrapper.UpdatePetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7v8TAAD//45Jts8LFQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
