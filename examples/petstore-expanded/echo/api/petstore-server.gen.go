// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
	// (PUT /pets/{id})
	UpdatePetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------
	if paramValue := ctx.QueryParam("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// UpdatePetById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePetById(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/pets", wrapper.FindPets)
	router.POST("/pets", wrapper.AddPet)
	router.DELETE("/pets/:id", wrapper.DeletePet)
	router.GET("/pets/:id", wrapper.FindPetById)
	router.PUT("/pets/:id", wrapper.UpdatePetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
