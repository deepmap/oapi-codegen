// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	var queryParamsWithDefaults = ctx.QueryParams()

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", queryParamsWithDefaults, &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	// set default if not present: 100
	if _, ok := queryParamsWithDefaults["limit"]; !ok {
		queryParamsWithDefaults.Set("limit", "100")
	}

	err = runtime.BindQueryParameter("form", true, false, "limit", queryParamsWithDefaults, &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oPcnr7n6rrq72/0zAAD//8NBcu1lEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
