// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code" xml:"code"`
	Message string `json:"message" xml:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	Name                 string  `json:"name" xml:"name"`
	Tag                  *string `json:"tag,omitempty" xml:"tag,omitempty"`
	AdditionalProperties map[string]struct {
		Description *string `json:"description,omitempty" xml:"description,omitempty"`
	} `json:"-"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet
	// Embedded fields due to inline allOf schema
	Id int64 `json:"id" xml:"id"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {

	// tags to filter by
	Tags *[]string `json:"tags,omitempty" xml:"tags-list>tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty" xml:"limit,omitempty"`
}

// addPetJSONBody defines parameters for AddPet.
type addPetJSONBody NewPet

// AddPetRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody addPetJSONBody

// Getter for additional properties for NewPet. Returns the specified
// element and whether it was found
func (a NewPet) Get(fieldName string) (value struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NewPet
func (a *NewPet) Set(fieldName string, value struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Description *string `json:"description,omitempty" xml:"description,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NewPet to handle AdditionalProperties
func (a *NewPet) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return errors.Wrap(err, "error reading 'name'")
		}
		delete(object, "name")
	}

	if raw, found := object["tag"]; found {
		err = json.Unmarshal(raw, &a.Tag)
		if err != nil {
			return errors.Wrap(err, "error reading 'tag'")
		}
		delete(object, "tag")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Description *string `json:"description,omitempty" xml:"description,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Description *string `json:"description,omitempty" xml:"description,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NewPet to handle AdditionalProperties
func (a NewPet) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'name'"))
	}

	if a.Tag != nil {
		object["tag"], err = json.Marshal(a.Tag)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'tag'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
