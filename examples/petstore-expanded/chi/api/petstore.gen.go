// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"net/http"
	"strings"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code,omitempty"`

	// Error message
	Message string `json:"message,omitempty"`
}

// NewPet defines model for NewPet.
type NewPet struct {

	// Age of the pet
	Age *int32 `json:"age" bson:"years_old"`

	// Name of the pet
	Name string `json:"name,omitempty"`

	// Note of the pet
	Note string `json:"note"`

	// Type of the pet
	Tag *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	// Embedded struct due to allOf(#/components/schemas/NewPet)
	NewPet
	// Embedded fields due to inline allOf schema

	// Unique id of the pet
	Id int64 `json:"id,omitempty"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {

	// tags to filter by
	Tags *[]string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody NewPet

// AddPetRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

type ServerInterface interface {
	// Returns all pets (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request)
	// Creates a new pet (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request)
	// Returns a pet by ID (GET /pets/{id})
	FindPetById(w http.ResponseWriter, r *http.Request)
}

// ParamsForFindPets operation parameters from context
func ParamsForFindPets(ctx context.Context) *FindPetsParams {
	return ctx.Value("FindPetsParams").(*FindPetsParams)
}

// FindPets operation middleware
func FindPetsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params FindPetsParams

		// ------------- Optional query parameter "tags" -------------
		if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "FindPetsParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// AddPet operation middleware
func AddPetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DeletePet operation middleware
func DeletePetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// FindPetById operation middleware
func FindPetByIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int64

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(FindPetsCtx)
		r.Get("/pets", si.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Use(AddPetCtx)
		r.Post("/pets", si.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Use(DeletePetCtx)
		r.Delete("/pets/{id}", si.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Use(FindPetByIdCtx)
		r.Get("/pets/{id}", si.FindPetById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
